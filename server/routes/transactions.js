const express = require('express');
const router = express.Router();
const Transaction = require('../models/Transaction');
const Book = require('../models/Book');
const User = require('../models/User');

// Issue a book
router.post('/issue', async (req, res) => {
    const { bookName, userId, issueDate } = req.body;
    console.log(bookName, userId, issueDate);
    
    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const user = await User.findById(userId);
        if (!user) return res.status(404).json({ message: 'User not found' });

        const newTransaction = new Transaction({
            bookId: book._id,
            userId: userId,
            issueDate,
            status: 'Issued'
        });

        await newTransaction.save();
        res.status(201).json({ message: 'Book issued successfully' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Return a book and calculate rent
router.post('/return', async (req, res) => {
    const { bookId, userId, returnDate } = req.body; // Get bookId from the request body
  
    try {
        console.log(bookId);
        
      const book = await Book.findById(bookId); // Find book by ID instead of name
      if (!book) {
        return res.status(404).json({ message: 'Book not found' });
      }
  
      const transaction = await Transaction.findOne({ bookId: book._id, userId, status: 'Issued' });
      if (!transaction) {
        return res.status(404).json({ message: 'Transaction not found' });
      }
  
      const issueDate = new Date(transaction.issueDate);
      const returnDateObj = new Date(returnDate);
  
      // Validate return date
      if (isNaN(returnDateObj.getTime()) || returnDateObj < issueDate) {
        return res.status(400).json({ message: 'Invalid return date' });
      }
  
      const daysIssued = Math.ceil((returnDateObj - issueDate) / (1000 * 60 * 60 * 24)) || 0;
      const totalRent = daysIssued * book.rentPerDay;
  
      // Update transaction
      transaction.returnDate = returnDate;
      transaction.totalRent = totalRent;
      transaction.status = 'Returned';
  
      await transaction.save();
      res.json({ message: 'Book returned successfully', totalRent });
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  });
  

// issued count and current holder
router.get('/book/:bookName', async (req, res) => {
    const { bookName } = req.params;

    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const transactions = await Transaction.find({ bookId: book._id }).populate('userId', 'name');
        
        const currentlyIssued = transactions.filter(tx => tx.status === 'Issued');
        const issuedCount = transactions.length;

        res.json({
            issuedCount,
            currentlyIssued: currentlyIssued.length ? currentlyIssued[0].userId.name : 'Not currently issued'
        });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// total rent generated by a book
router.get('/book/rent/:bookName', async (req, res) => {
    const { bookName } = req.params;

    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const transactions = await Transaction.find({ bookId: book._id, status: 'Returned' });

        const totalRent = transactions.reduce((sum, tx) => sum + (tx.totalRent || 0), 0);

        res.json({ totalRent });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// books issued to a specific user
router.get('/user/:userId', async (req, res) => {
    const { userId } = req.params;

    try {
        const transactions = await Transaction.find({ userId }).populate('bookId', 'bookName');
        
        console.log(transactions);
        res.json(transactions);
        
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// list of books issued in a date range
router.get('/date-range', async (req, res) => {
    const { startDate, endDate } = req.query;

    try {
        const transactions = await Transaction.find({
            issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
        }).populate('bookId', 'bookName').populate('userId', 'name');

        res.json(transactions);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

module.exports = router;
